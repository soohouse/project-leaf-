<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.leaf.project.mapper.IProjectMapper">
	
	<!-- ProjectListVO와 데이터베이스 컬럼명을 일치시켜주는 resultMap인 ProjectListMap 선언 -->
	<resultMap type="com.spring.leaf.project.command.ProjectListVO" id="ProjectListMap">
		<id property="projectNO" column="project_NO" />
		<result property="projectName" column="project_name"/>
		<result property="projectRequireRole" column="project_require_role"/>
		<result property="projectRequireDate1" column="project_require_date1"/>
		<result property="projectRequireDate2" column="project_require_date2"/>
		<result property="companyNO" column="company_NO"/>
		<result property="companyName" column="company_name"/>
		<result property="commonCODE" column="common_CODE"/>
		<result property="commonValue" column="common_value"/>
	</resultMap>
	
	<!-- ProjectContentVO와 데이터베이스 컬럼명을 일치시켜주는 resultMap인 ProjectContentMap 선언 -->
	<resultMap type="com.spring.leaf.project.command.ProjectContentVO" id="ProjectContentMap">
		<id property="projectNO" column="project_NO" />
		<result property="projectName" column="project_name"/>
		<result property="projectDesc" column="project_desc"/>
		<result property="projectManager" column="project_manager"/>
		<result property="projectManagerPhone" column="project_manager_phone"/>
		<result property="projectManagerEmail" column="project_manager_email"/>
		<result property="projectRequireLicense" column="project_require_license"/>
		<result property="projectRequireRole" column="project_require_role"/>
		<result property="projectRequirePeople" column="project_require_people"/>
		<result property="projectRequireDate1" column="project_require_date1"/>
		<result property="projectRequireDate2" column="project_require_date2"/>
		<result property="projectViews" column="project_views"/>
		<result property="companyNO" column="company_NO"/>
		<result property="companyName" column="company_name"/>
		<result property="companyPhone1" column="company_phone1"/>
		<result property="companyPhone2" column="company_phone2"/>
		<result property="companyPhone3" column="company_phone3"/>
		<result property="companyAddress1" column="company_address1"/>
		<result property="companyAddress2" column="company_address2"/>
		<result property="companyAddress3" column="company_address3"/>
		<result property="commonCODE" column="common_CODE"/>
		<result property="commonValue" column="common_value"/>
	</resultMap>
	
	<!-- ProjectImageVO와 데이터베이스 컬럼명을 일치시켜주는 resultMap인 ImageMap 선언 -->
	<resultMap type="com.spring.leaf.project.command.ProjectImageVO" id="ImageMap">
		<id property="projectImageNO" column="project_image_NO" />
		<result property="projectImageFilename" column="project_image_filename" />
		<result property="projectImageUploadpath" column="project_image_uploadpath" />
		<result property="projectImageRealname" column="project_image_realname" />
		<result property="projectNO" column="project_NO" />
	</resultMap>
	
	<!-- 현재 날짜에서 6달 전 달 까지의 값을 가져오는 ProjectDateVO와 데이터베이스 컬럼명을 일치시켜주는 resultMap인 ProjectDateMap 선언 -->
	<resultMap type="com.spring.leaf.project.command.ProjectDateVO" id="ProjectDateMap">
		<result property="projectDateNow" column="project_date_now" />
		<result property="projectDateBefore1" column="project_date_before1" />
		<result property="projectDateBefore2" column="project_date_before2" />
		<result property="projectDateBefore3" column="project_date_before3" />
		<result property="projectDateBefore4" column="project_date_before4" />
		<result property="projectDateBefore5" column="project_date_before5" />
	</resultMap>
	
	<!-- 현재 날짜에서 6달 전 까지의 프로젝트 등록 빈도를 가져오는 ProjectRegistCountVO와 데이터베이스 컬럼명을 일치시켜주는 resultMap인 ProjectRegistCountMap 선언 -->
	<resultMap type="com.spring.leaf.project.command.ProjectRegistCountVO" id="ProjectRegistCountMap">
		<result property="projectRegistCountNow" column="project_regist_count_now" />
		<result property="projectRegistCountBefore1" column="project_regist_count_before1" />
		<result property="projectRegistCountBefore2" column="project_regist_count_before2" />
		<result property="projectRegistCountBefore3" column="project_regist_count_before3" />
		<result property="projectRegistCountBefore4" column="project_regist_count_before4" />
		<result property="projectRegistCountBefore5" column="project_regist_count_before5" />
	</resultMap>
	
	<sql id="search2">
		<if test="condition == 'title'">
			AND p.project_name LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="condition == 'writer'">
			AND c.company_name LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="condition == 'date'">
			AND p.project_require_date1 LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="pvo.condition == 'title'">
			AND p.project_name LIKE concat('%', #{pvo.keyword}, '%')
		</if>
		<if test="pvo.condition == 'writer'">
			AND c.company_name LIKE concat('%', #{pvo.keyword}, '%')
		</if>
		<if test="pvo.condition == 'date'">
			AND p.project_require_date1 LIKE concat('%', #{pvo.keyword}, '%')
		</if>
	</sql>
	
	
	<sql id="search">
		<if test="condition == 'title'">
			AND project_name LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="condition == 'writer'">
			AND company_name LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="condition == 'date'">
			AND project_require_date1 LIKE concat('%', #{keyword}, '%')
		</if>
	</sql>
	
	
	<sql id="search3">
		<if test="condition == 'title'">
			AND p.project_name LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="condition == 'writer'">
			AND c.company_name LIKE concat('%', #{keyword}, '%')
		</if>
		<if test="condition == 'date'">
			AND p.project_require_date1 LIKE concat('%', #{keyword}, '%')
		</if>
	</sql>
	
	
	<!-- 프로젝트 등록하기 -->
	<insert id="projectputin">
		INSERT INTO project(project_name, project_desc, project_manager, project_manager_phone, project_manager_email, project_require_license
		, project_require_role, project_require_people, project_require_date1, project_require_date2, company_NO)
		VALUES (#{projectName}, #{projectDesc}, #{projectManager}, #{projectManagerPhone}, #{projectManagerEmail}, #{projectRequireLicense}
		, #{projectRequireRole}, #{projectRequirePeople}, #{projectRequireDate1}, #{projectRequireDate2}, #{companyNO})
	</insert>

	<!-- 프로젝트 상세보기 -->
	<select id="getContent" resultMap="ProjectContentMap">
		SELECT
			p.project_NO, p.project_name, p.project_desc, p.project_manager, p.project_manager_phone, p.project_manager_email, p.project_views, p.project_require_license, p.project_require_role, p.project_require_people, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, c.company_phone1, c.company_phone2, c.company_phone3, c.company_address1, c.company_address2, c.company_address3, p.common_CODE, cd.common_value
		FROM
			project p LEFT OUTER JOIN company c
		ON p.company_NO = c.company_NO
		LEFT OUTER JOIN common cd
		ON p.common_CODE = cd.common_CODE
		WHERE p.project_NO = #{projectNO}
	</select>
	
	<update id="updateProjectContent">
		UPDATE project
		SET
			project_desc = #{projectDesc}, project_manager = #{projectManager}, project_manager_phone = #{projectManagerPhone},
			project_manager_email = #{projectManagerEmail}, project_require_people = #{projectRequirePeople}
		WHERE project_NO = #{projectNO}	
	</update>
	
	<!-- 프로젝트 목록 -->
	<select id="projectlist" resultMap="ProjectListMap">
		SELECT
   			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
   			project p LEFT OUTER JOIN company c
      	ON p.company_NO = c.company_NO
   		LEFT OUTER JOIN common cd
      	ON p.common_CODE = cd.common_CODE
      	WHERE p.project_NO != 1
      	AND p.common_CODE NOT IN ('PST003', 'PST004')
      	<include refid="search3" />
      	ORDER BY p.project_NO DESC
      	LIMIT ${cpp}
		OFFSET ${skip}
	</select>
	
	
	<!-- 프로젝트 총 게시글 수 -->
	<select id="getTotal" resultType="int">
		SELECT COUNT(*)
		FROM project p LEFT OUTER JOIN company c
		ON p.company_NO = c.company_NO
		WHERE p.common_CODE NOT IN ('PST003', 'PST004')
		<include refid="search3" />
	</select>
	
	
	<!-- 현재 모집 진행중인 프로젝트 검색 -->
	<select id="projectNow" resultMap="ProjectListMap">
		SELECT
   			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
   			project p LEFT OUTER JOIN company c
      	ON p.company_NO = c.company_NO
   		LEFT OUTER JOIN common cd
      	ON p.common_CODE = cd.common_CODE
      	WHERE p.project_NO != 1
      	AND p.common_CODE = 'PST001'
      	<include refid="search" />
      	ORDER BY p.project_NO DESC
      	LIMIT ${cpp}
		OFFSET ${skip}
	</select>
	
	
	<!-- 모집 중인 프로젝트 총 게시글 수 -->
	<select id="getTotalNow" resultType="int">
		SELECT COUNT(*)
		FROM project
		WHERE common_CODE = 'PST001'
	</select>
	
	
	<!-- 모집 마감 임박인 프로젝트 검색 -->
	<select id="projectHurry" resultMap="ProjectListMap">
		SELECT
   			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
   			project p LEFT OUTER JOIN company c
      	ON p.company_NO = c.company_NO
   		LEFT OUTER JOIN common cd
      	ON p.common_CODE = cd.common_CODE
      	WHERE p.project_NO != 1
      	AND p.common_CODE = 'PST002'
      	<include refid="search" />
      	ORDER BY p.project_NO DESC
      	LIMIT ${cpp}
		OFFSET ${skip}
	</select>
	
	
	<!-- 모집 마감 임박인 프로젝트 총 게시글 수 -->
	<select id="getTotalHurry" resultType="int">
		SELECT COUNT(*)
		FROM project
		WHERE common_CODE = 'PST002'
	</select>
	
	
	<!-- 모집이 종료된 프로젝트 검색 -->
	<select id="projectEnd" resultMap="ProjectListMap">
		SELECT
   			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
   			project p LEFT OUTER JOIN company c
      	ON p.company_NO = c.company_NO
   		LEFT OUTER JOIN common cd
      	ON p.common_CODE = cd.common_CODE
      	WHERE p.project_NO != 1
      	AND p.common_CODE = 'PST003'
      	<include refid="search" />
      	ORDER BY p.project_NO DESC
      	LIMIT ${cpp}
		OFFSET ${skip}
	</select>
	
	
	<!-- 모집 종료된 프로젝트 총 게시글 수 -->
	<select id="getTotalEnd" resultType="int">
		SELECT COUNT(*)
		FROM project
		WHERE common_CODE = 'PST003'
	</select>
	
	
	<!-- 일반회원 좋아요 누른 프로젝트 목록 -->
	<select id="projectLikeUser" resultMap="ProjectListMap">
		SELECT
            p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
      FROM
            project p LEFT OUTER JOIN company c
         ON p.company_NO = c.company_NO
            LEFT OUTER JOIN project_like pl
            ON p.project_NO = pl.project_NO
         LEFT OUTER JOIN common cd
         ON p.common_CODE = cd.common_CODE
         WHERE p.project_NO != 1
         AND p.common_CODE NOT IN ('PST004')
        AND pl.user_NO = #{userNO}
         ORDER BY p.project_NO DESC
         LIMIT ${pvo.cpp}
		OFFSET ${pvo.skip}
	</select>
	
	
	<!-- 일반회원 좋아요 누른 프로젝트 목록 총 게시물 수 -->
	<select id="getTotalLikeUser" resultType="int">
		SELECT COUNT(*)
		FROM
		   project p LEFT OUTER JOIN project_like pl
		    ON p.project_NO = pl.project_NO
		WHERE 
		   pl.user_NO = #{userNO}
	</select>
	
	
	<!-- 기업회원 좋아요 누른 프로젝트 목록 -->
	<select id="projectLikeCompany" resultMap="ProjectListMap">
		SELECT
            p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
      FROM
            project p LEFT OUTER JOIN company c
         ON p.company_NO = c.company_NO
            LEFT OUTER JOIN project_like pl
            ON p.project_NO = pl.project_NO
         LEFT OUTER JOIN common cd
         ON p.common_CODE = cd.common_CODE
         WHERE p.project_NO != 1
         AND p.common_CODE NOT IN ('PST004')
        AND pl.company_NO = #{companyNO}
         ORDER BY p.project_NO DESC
         LIMIT ${pvo.cpp}
		OFFSET ${pvo.skip}
	</select>
	
	
	<!-- 기업회원 좋아요 누른 프로젝트 목록 총 게시물 수 -->
	<select id="getTotalLikeCompany" resultType="int">
		SELECT COUNT(*)
		FROM
		   project p LEFT OUTER JOIN project_like pl
		    ON p.project_NO = pl.project_NO
		WHERE 
		   pl.company_NO = #{companyNO}
	</select>
	
	
	<!-- 날짜로 프로젝트 검색 -->
	<select id="projectSearchDate" resultMap="ProjectListMap">
		SELECT
            p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
      FROM
            project p LEFT OUTER JOIN company c
         ON p.company_NO = c.company_NO
         LEFT OUTER JOIN common cd
         ON p.common_CODE = cd.common_CODE
         WHERE p.project_NO != 1
         AND p.common_CODE NOT IN ('PST004')
         AND #{date}
        BETWEEN DATE_ADD(p.project_require_date1, INTERVAL -1 SECOND) AND DATE_ADD(p.project_require_date2, INTERVAL -1 SECOND)
         ORDER BY p.project_NO DESC
         LIMIT ${pvo.cpp}
		OFFSET ${pvo.skip}
	</select>
	
	
	<!-- 날짜로 검색한 프로젝트 목록 총 게시물 수 -->
	<select id="getTotalSearchDate" resultType="int">
		SELECT COUNT(*)
		FROM project
		WHERE #{date}
        BETWEEN DATE_ADD(project_require_date1, INTERVAL -1 SECOND) AND DATE_ADD(project_require_date2, INTERVAL -1 SECOND)
        AND common_CODE != 'PST004'
	</select>


	<!-- 프로젝트 검색 -->
	<select id="projectSearch" resultMap="ProjectListMap">
		SELECT
			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
			project p LEFT OUTER JOIN company c
		ON p.company_NO = c.company_NO
		LEFT OUTER JOIN common cd
		ON p.common_CODE = cd.common_CODE
		WHERE p.project_NO != 1
		AND p.project_name LIKE CONCAT('%', #{keyword}, '%')
		ORDER BY p.project_NO DESC
	</select>
	
	
	<select id="projectadmin" resultMap="ProjectListMap">
		SELECT
   			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
   			project p LEFT OUTER JOIN company c
      	ON p.company_NO = c.company_NO
   		LEFT OUTER JOIN common cd
      	ON p.common_CODE = cd.common_CODE
      	WHERE p.project_NO != 1
      	AND p.common_CODE NOT IN ('PST003', 'PST004')
      	AND c.company_NO = #{companyNO}
      	<include refid="search2" />
      	ORDER BY p.project_NO DESC
      	LIMIT ${pvo.cpp}
		OFFSET ${pvo.skip}
	</select>
	
	
	<select id="projectadminAll" resultMap="ProjectListMap">
		SELECT
   			p.project_NO, p.project_name, p.project_require_role, p.project_require_date1, p.project_require_date2, p.company_NO, c.company_name, p.common_CODE, cd.common_value
		FROM
   			project p LEFT OUTER JOIN company c
      	ON p.company_NO = c.company_NO
   		LEFT OUTER JOIN common cd
      	ON p.common_CODE = cd.common_CODE
      	WHERE p.project_NO != 1
      	AND p.common_CODE NOT IN ('PST003', 'PST004')
      	<include refid="search2" />
      	ORDER BY p.project_NO DESC
      	LIMIT ${pvo.cpp}
		OFFSET ${pvo.skip}
	</select>
	
	
	<select id="getTotalAdmin" resultType="int">
		SELECT COUNT(*)
		FROM project p LEFT OUTER JOIN company c
        ON p.company_NO = c.company_NO
		WHERE p.project_NO != 1
      	AND p.common_CODE NOT IN ('PST003', 'PST004')
      	AND c.company_NO = #{companyNO}
      	<include refid="search2" />
	</select>
	
	
	<select id="getTotalAdminAll" resultType="int">
		SELECT COUNT(*)
		FROM project
		WHERE project_NO != 1
      	AND common_CODE NOT IN ('PST003', 'PST004')
      	<include refid="search" />
	</select>
	
	
	<!-- 일반회원 회원번호 얻어내는 SELECT 쿼리 -->
	<select id="projectNOGet" resultType="int">
		SELECT MAX(project_NO) + 1
		FROM project;
	</select>
	
	
	<!-- 프로젝트 사진 INSERT 쿼리 -->
	<insert id="projectImage">
		INSERT INTO project_image
			(project_image_filename, project_image_uploadpath, project_image_realname, project_NO)
		VALUES
			(#{projectImageFilename}, #{projectImageUploadpath}, #{projectImageRealname}, #{projectNO})
	</insert>
	
	
	<!-- 프로젝트 사진 불러오기 SELECT 쿼리 -->
	<select id="projectImageGet" resultMap="ImageMap">
		SELECT *
		FROM project_image
		WHERE project_NO = #{projectNO}
	</select>
	
	<!-- 프로젝트 사진 수정하기 UPDATE 쿼리 -->
	<update id="projectImageUpdate">
		UPDATE project_image
		SET project_image_filename=#{projectImageFilename}, project_image_uploadpath=#{projectImageUploadpath}, project_image_realname=#{projectImageRealname}
		WHERE project_NO=#{projectNO}
	</update>
	
	<!-- 프로젝트 사진 삭제하기 UPDATE 쿼리 -->
	<update id="projectImageDelete">
		UPDATE project_image
		SET project_image_filename=null, project_image_uploadpath=null, project_image_realname=null
		WHERE project_NO=#{projectNO}
	</update>
	
	<!-- 프로젝트 등록 빈도 달 마다 값 가져오기 -->
	<select id="projectRegistCount" resultMap="ProjectRegistCountMap">
		SELECT 
			COUNT(case when project_date LIKE CONCAT('%', SUBSTRING(DATE_ADD(NOW(), INTERVAL -1 SECOND), 1, 7), '%') then 1 end) AS project_regist_count_now,
			COUNT(case when project_date LIKE CONCAT('%', SUBSTRING(DATE_ADD(NOW(), INTERVAL -1 MONTH), 1, 7), '%') then 1 end) AS project_regist_count_before1,
		    COUNT(case when project_date LIKE CONCAT('%', SUBSTRING(DATE_ADD(NOW(), INTERVAL -2 MONTH), 1, 7), '%') then 1 end) AS project_regist_count_before2,
		    COUNT(case when project_date LIKE CONCAT('%', SUBSTRING(DATE_ADD(NOW(), INTERVAL -3 MONTH), 1, 7), '%') then 1 end) AS project_regist_count_before3,
		    COUNT(case when project_date LIKE CONCAT('%', SUBSTRING(DATE_ADD(NOW(), INTERVAL -4 MONTH), 1, 7), '%') then 1 end) AS project_regist_count_before4,
		    COUNT(case when project_date LIKE CONCAT('%', SUBSTRING(DATE_ADD(NOW(), INTERVAL -5 MONTH), 1, 7), '%') then 1 end) AS project_regist_count_before5
		FROM project
		WHERE company_NO = #{companyNO}
	</select>

	
	
	<!-- 6달 전 까지의 날짜 달 값 가져오기 -->
	<select id="projectDate" resultMap="ProjectDateMap">
		SELECT 
			SUBSTRING(DATE_ADD(NOW(), INTERVAL -1 SECOND), 1, 7) AS project_date_now,
		    SUBSTRING(DATE_ADD(NOW(), INTERVAL -1 MONTH), 1, 7) AS project_date_before1,
		    SUBSTRING(DATE_ADD(NOW(), INTERVAL -2 MONTH), 1, 7) AS project_date_before2,
		    SUBSTRING(DATE_ADD(NOW(), INTERVAL -3 MONTH), 1, 7) AS project_date_before3,
		    SUBSTRING(DATE_ADD(NOW(), INTERVAL -4 MONTH), 1, 7) AS project_date_before4,
		    SUBSTRING(DATE_ADD(NOW(), INTERVAL -5 MONTH), 1, 7) AS project_date_before5
		FROM project
		WHERE project_NO = 1;
	</select>
	
	
	<!-- 일반회원이 해당 프로젝트에 좋아요 버튼을 눌렀는지 체크하는 SELECT 쿼리 -->
	<select id="projectLikeCheck" resultType="int">
		SELECT COUNT(*)
		FROM project_like
		WHERE user_NO = #{userNO}
		AND project_NO = #{projectNO}
	</select>
	
	
	<!-- 기업회원이 해당 프로젝트에 좋아요 버튼을 눌렀는지 체크하는 SELECT 쿼리 -->
	<select id="projectLikeCheckCompany" resultType="int">
		SELECT COUNT(*)
		FROM project_like
		WHERE company_NO = #{companyNO}
		AND project_NO = #{projectNO}
	</select>
	
	
	<!-- 일반회원 좋아요 버튼 클릭 시 좋아요 테이블에 값 추가 INSERT 쿼리 -->
	<insert id="projectLikeOK">
		INSERT INTO project_like(project_NO, user_NO, company_NO)
		VALUES(#{projectNO}, #{userNO}, null)
	</insert>
	
	
	<!-- 일반회원 좋아요 버튼 다시 클릭 시 좋아요 취소 DELETE 쿼리 -->
	<delete id="projectLikeCancel">
		DELETE FROM project_like
		WHERE project_NO = #{projectNO}
		AND user_NO = #{userNO}
	</delete>
	

	<!-- 기업회원 좋아요 버튼 클릭 시 좋아요 테이블에 값 추가 INSERT 쿼리 -->
	<insert id="projectLikeCompanyOK">
		INSERT INTO project_like(project_NO, user_NO, company_NO)
		VALUES(#{projectNO}, null, #{companyNO})
	</insert>
	
	
	<!-- 기업회원 좋아요 버튼 다시 클릭 시 좋아요 취소 DELETE 쿼리 -->
	<delete id="projectLikeCompanyCancel">
		DELETE FROM project_like
		WHERE project_NO = #{projectNO}
		AND company_NO = #{companyNO}
	</delete>
	
	
	<!-- 프로젝트 좋아요 수 얻어오는 SELECT 쿼리 -->
	<select id="projectLikeGet" resultType="int">
		SELECT COUNT(*)
		FROM project_like
		WHERE project_NO = #{projectNO}
	</select>
	
	
	<!-- 프로젝트 삭제 -->
	<update id="deleteProject">
		UPDATE project
		SET 
			common_CODE = 'PST004', project_delete = NOW()
		WHERE project_NO = #{projectNO}
	</update>
	
	
	<!-- 프로젝트를 삭제하기 전 지원한 일반회원이 있는지 체크하는 SELECT 쿼리 -->
	<select id="projectUserCheck" resultType="int">
		SELECT COUNT(*)
		FROM apply
		WHERE project_NO = #{projectNO}
		AND common_CODE != 'SPT005'
	</select>

</mapper>
